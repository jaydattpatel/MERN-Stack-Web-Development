/*
To create a CSS animation sequence, you style the element you want to animate with the animation property or its sub-properties. This lets you configure the timing, duration, and other details of how the animation sequence should progress. This does not configure the actual appearance of the animation, which is done using the @keyframes at-rule as described in the Defining animation sequence using keyframes section below.

-> @keyframes
-> animation-name
-> animation-duration
-> animation-delay
-> animation-iteration-count
-> animation-direction
-> animation-timing-function
-> animation-fill-mode
-> animation

@keyframes _name_{
    
    from{ }

    %{ } --optional
    .
    .
    .
    to{ }

}

@keyframes _name_{
    0%{   }

    %{ }
    .
    .
    .
    100%{ }

}

The sub-properties of the animation property are:

animation-composition : 
Specifies the composite operation to use when multiple animations affect the same property simultaneously. This property is not part of the animation shorthand property.

animation-delay : 
Specifies the delay between an element loading and the start of an animation sequence and whether the animation should start immediately from its beginning or partway through the animation.

animation-direction : 
Specifies whether an animation's first iteration should be forward or backward and whether subsequent iterations should alternate direction on each run through the sequence or reset to the start point and repeat.

animation-duration: 
Specifies the length of time in which an animation completes one cycle.

animation-fill-mode :
Specifies how an animation applies styles to its target before and after it runs.

animation-iteration-count :
Specifies the number of times an animation should repeat.

animation-name :
Specifies the name of the @keyframes at-rule describing an animation's keyframes.

animation-play-state :
Specifies whether to pause or play an animation sequence.

animation-timeline Experimental :
Specifies the timeline that is used to control the progress of a CSS animation.

animation-timing-function :
Specifies how an animation transitions through keyframes by establishing acceleration curves.
*/
#main {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
#main div {
  height: 5rem;
  width: 5rem;
  background-color: cyan;
  border: 1px solid black;
  margin: 5rem 2rem;
}

@keyframes bounce {
  0% {
    transform: translate(0, 0);
  }
  25% {
    transform: translate(0, -50%);
  }
  50% {
    transform: translate(0, 0);
  }
  75% {
    transform: translate(0, -25%);
  }
  100% {
    transform: translate(0, 0);
  }
}

@keyframes fadein {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes myradius {
  from {
    border-radius: 0%;
  }
  to {
    border-radius: 50%;
  }
}

@keyframes mytranslate {
  0% {
    transform: translate(0%, 0%);
  }

  50% {
    transform: translate(40%, 40%);
  }

  100% {
    transform: translate(80%, 80%);
  }
}
@keyframes myrotate {
  0% {
    transform: rotate(0deg);
  }

  50% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes myscale {
  0% {
    transform: scale(1, 1);
  }

  15% {
    transform: scale(0.9, 0.9);
  }
  30% {
    transform: scale(0.85, 0.85);
  }
  100% {
    transform: scale(0.5, 0.5);
  }
}
@keyframes mycolor {
  0% {
    background-color: rgb(0, 255, 255);
  }

  25% {
    background-color: rgb(100, 200, 255);
  }
  50% {
    background-color: rgb(200, 100, 200);
  }
  100% {
    background-color: rgb(255, 255, 100);
  }
}

.b1 {
  animation: bounce 2s 0.5s ease-out infinite;
}

.b2 {
  animation: fadein 1s ease-in-out infinite alternate;
}

.b3 {
  animation: myradius 1s ease-in-out infinite alternate,
    myscale 1s ease-in-out infinite alternate;
}

.b4 {
  animation-name: mytranslate, myrotate;
  animation-duration: 2s, 2s;
  animation-delay: 0.5s;
  animation-timing-function: linear, linear;
  animation-iteration-count: infinite, infinite;
  animation-direction: alternate, alternate;
}

.b5 {
  animation-name: myradius, mytranslate, mycolor;
  animation-duration: 1s, 1s;
  animation-delay: 0.5s;
  animation-timing-function: linear, linear;
  animation-iteration-count: infinite, infinite;
  animation-direction: alternate, alternate;
}
